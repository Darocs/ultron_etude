"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[338],{8092:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var o=n(4848),r=n(8453);const i={sidebar_position:1},l="Allure",s={id:"common/allure",title:"Allure",description:"Ultron can generate artifacts for Allure report.",source:"@site/docs/common/allure.md",sourceDirName:"common",slug:"/common/allure",permalink:"/docs/common/allure",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"withSuitableRoot",permalink:"/docs/android/rootview"},next:{title:"Ultron Extension",permalink:"/docs/common/extension"}},a={},c=[{value:"Ultron Allure report contains:",id:"ultron-allure-report-contains",level:2},{value:"Ultron <code>step</code>",id:"ultron-step",level:2},{value:"Best practice",id:"best-practice",level:3},{value:"Allure for Compose",id:"allure-for-compose",level:2},{value:"Custom config",id:"custom-config",level:2},{value:"Add detailed info about your conditions to report",id:"add-detailed-info-about-your-conditions-to-report",level:2},{value:"How to add custom artifacts to Allure report?",id:"how-to-add-custom-artifacts-to-allure-report",level:2},{value:"Write artifact to report",id:"write-artifact-to-report",level:3},{value:"Manage artifact creation",id:"manage-artifact-creation",level:3}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{id:"allure",children:"Allure"}),"\n",(0,o.jsx)(t.p,{children:"Ultron can generate artifacts for Allure report."}),"\n",(0,o.jsxs)(t.p,{children:["Just set Ultron ",(0,o.jsx)(t.code,{children:"testInstrumentationRunner"})," in your app build.gradle file (",(0,o.jsx)(t.a,{href:"https://github.com/open-tool/ultron/blob/master/sample-app/build.gradle.kts#L14",children:"example build.gradle.kts"}),")"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-kotlin",children:'android {\n    defaultConfig {\n        testInstrumentationRunner = "com.atiurin.ultron.allure.UltronAllureTestRunner"\n        ...\n    }\n'})}),"\n",(0,o.jsxs)(t.p,{children:["and apply recommended config in your BaseTest class (",(0,o.jsx)(t.a,{href:"https://github.com/open-tool/ultron/blob/master/sample-app/src/androidTest/java/com/atiurin/sampleapp/tests/BaseTest.kt#L31",children:"example BaseTest"}),")."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-kotlin",children:"@BeforeClass @JvmStatic\nfun setConfig() {\n    UltronConfig.applyRecommended()\n    UltronAllureConfig.applyRecommended()\n}\n"})}),"\n",(0,o.jsx)(t.h2,{id:"ultron-allure-report-contains",children:"Ultron Allure report contains:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"Detailed report about all operations in your test"}),"\n",(0,o.jsx)(t.li,{children:"Logcat file (in case of failure)"}),"\n",(0,o.jsx)(t.li,{children:"Screenshot (in case of failure)"}),"\n",(0,o.jsx)(t.li,{children:"Ultron log file (in case of failure)"}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"You also can add any artifact you need. It will be described later."}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{src:"https://github.com/open-tool/ultron/assets/12834123/c05c813a-ece6-45e6-a04f-e1c92b82ffb1",alt:"allure"})}),"\n",(0,o.jsx)(t.hr,{}),"\n",(0,o.jsxs)(t.h2,{id:"ultron-step",children:["Ultron ",(0,o.jsx)(t.code,{children:"step"})]}),"\n",(0,o.jsxs)(t.p,{children:["Ultron wraps Allure ",(0,o.jsx)(t.code,{children:"step"})," method into it's own one."]}),"\n",(0,o.jsx)(t.p,{children:"It's recommended to use Ultron method cause it will provide more info to report in future releases."}),"\n",(0,o.jsx)(t.h3,{id:"best-practice",children:"Best practice"}),"\n",(0,o.jsxs)(t.p,{children:["Wraps all steps with Ultron ",(0,o.jsx)(t.code,{children:"step"})," method e.g."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-kotlin",children:'object ChatPage: Page<ChatPage>(){\n    ...\n    fun sendMessage(text: String) = apply {\n        step("Send message with text \'$text") {\n            inputMessageText.typeText(text)\n            sendMessageBtn.click()\n            this.getMessageListItem(text).text\n                .isDisplayed()\n                .hasText(text)\n        }\n    }\n\n    fun assertMessageTextAtPosition(position: Int, text: String) = apply {\n        step("Assert item at position $position has text \'$text\'"){\n            this.getListItemAtPosition(position).text.isDisplayed().hasText(text)\n        }\n    }\n}\n'})}),"\n",(0,o.jsx)(t.h2,{id:"allure-for-compose",children:"Allure for Compose"}),"\n",(0,o.jsx)(t.p,{children:"add 3 lines more to your config initialisation method"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-kotlin",children:"@BeforeClass @JvmStatic\nfun setConfig() {\n    ...\n    UltronComposeConfig.applyRecommended() \n    UltronComposeConfig.addListener(ScreenshotAttachListener())\n    UltronComposeConfig.addListener(WindowHierarchyAttachListener())\n    UltronComposeConfig.addListener(DetailedOperationAllureListener())\n}\n"})}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{src:"https://github.com/open-tool/ultron/assets/12834123/1f751f3d-fc58-4874-a850-acd9181bfb70",alt:"allure compose"})}),"\n",(0,o.jsx)(t.h2,{id:"custom-config",children:"Custom config"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-kotlin",children:"UltronConfig.apply {\n    this.operationTimeoutMs = 10_000\n    this.logToFile = false\n    this.accelerateUiAutomator = false\n}\nUltronAllureConfig.apply {\n    this.attachUltronLog = false\n    this.attachLogcat = false\n    this.detailedAllureReport = false\n    this.addConditionsToReport = false\n    this.addScreenshotPolicy = mutableSetOf(\n        AllureAttachStrategy.TEST_FAILURE,      // attach screenshot at the end of failed test\n        AllureAttachStrategy.OPERATION_FAILURE, // attach screenshot once operation failed\n        AllureAttachStrategy.OPERATION_SUCCESS  // attach screenshot for each operation\n    )\n}\nUltronComposeConfig.apply {\n    this.operationTimeoutMs = 7_000\n    ...\n}\n"})}),"\n",(0,o.jsx)(t.h2,{id:"add-detailed-info-about-your-conditions-to-report",children:"Add detailed info about your conditions to report"}),"\n",(0,o.jsxs)(t.p,{children:["Ultron provides cool feature called ",(0,o.jsx)(t.strong,{children:"Test condition management"})," (",(0,o.jsx)(t.a,{href:"https://github.com/open-tool/ultron/wiki/Full-control-of-your-tests",children:"https://github.com/open-tool/ultron/wiki/Full-control-of-your-tests"}),")"]}),"\n",(0,o.jsxs)(t.p,{children:["With recommended config all conditions will be added to Allure report automatically. The ",(0,o.jsx)(t.code,{children:"name"})," of rule and condition is used as Allure ",(0,o.jsx)(t.code,{children:"step"})," name."]}),"\n",(0,o.jsx)(t.p,{children:"For example this code"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-kotlin",children:'    val setupRule = SetUpRule("Login user rule")\n        .add(name = "Login valid user $CURRENT_USER") {\n            AccountManager(InstrumentationRegistry.getInstrumentation().targetContext).login(\n                CURRENT_USER.login, CURRENT_USER.password\n            )\n        }\n'})}),"\n",(0,o.jsx)(t.p,{children:"generate following marked steps"}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{src:"https://user-images.githubusercontent.com/12834123/232789449-1b6a0bc8-5c68-4dd3-836c-8d39696ce8dd.png",alt:"conditions"})}),"\n",(0,o.jsx)(t.h2,{id:"how-to-add-custom-artifacts-to-allure-report",children:"How to add custom artifacts to Allure report?"}),"\n",(0,o.jsx)(t.h3,{id:"write-artifact-to-report",children:"Write artifact to report"}),"\n",(0,o.jsx)(t.p,{children:"The framework has special methods to write your artifacts into report."}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"createCacheFile"})," - creates temp file to write the content (",(0,o.jsx)(t.a,{href:"https://github.com/open-tool/ultron/blob/master/ultron/src/main/java/com/atiurin/ultron/utils/InstrumentationUtil.kt",children:"see InstrumentationUtil.kt"}),")\\"]}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"AttachUtil.attachFile(...)"})," - to attach file to report ",(0,o.jsx)(t.a,{href:"https://github.com/open-tool/ultron/blob/master/ultron-allure/src/main/java/com/atiurin/ultron/allure/attachment/AttachUtil.kt",children:"see AttachUtil"})]}),"\n",(0,o.jsx)(t.p,{children:"You method can looks like"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-kotlin",children:'fun addMyArtifactToAllure(){\n    val tempFile = createCacheFile()\n    val result = writeContentToFile(tempFile)\n    val fileName = AttachUtil.attachFile(\n        name = "file_name.xml",\n        file = tempFile,\n        mimeType = "text/xml"\n    )\n}\n'})}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"writeContentToFile(tempFile)"})," - you should implement it."]}),"\n",(0,o.jsx)(t.h3,{id:"manage-artifact-creation",children:"Manage artifact creation"}),"\n",(0,o.jsx)(t.p,{children:"You can attach artifact using 2 types of Ultron listeners:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.a,{href:"https://github.com/open-tool/ultron/blob/master/ultron/src/main/java/com/atiurin/ultron/listeners/UltronLifecycleListener.kt",children:"UltronLifecycleListener"})," - once Ultron operation finished with any result. Sample - ",(0,o.jsx)(t.a,{href:"https://github.com/open-tool/ultron/blob/master/ultron-allure/src/main/java/com/atiurin/ultron/allure/listeners/ScreenshotAttachListener.kt",children:"ScreenshotAttachListener.kt"})]}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.a,{href:"https://github.com/open-tool/ultron/blob/master/ultron/src/main/java/com/atiurin/ultron/runner/UltronRunListener.kt",children:"UltronRunListener"})," which is inherited from ",(0,o.jsx)(t.a,{href:"https://github.com/open-tool/ultron/blob/master/ultron/src/main/java/com/atiurin/ultron/runner/RunListener.kt",children:"RunListener"}),". This type can be used to add artifact in different test lifecycle state. Sample - ",(0,o.jsx)(t.a,{href:"https://github.com/open-tool/ultron/blob/master/ultron-allure/src/main/java/com/atiurin/ultron/allure/runner/WindowHierarchyAttachRunListener.kt",children:"WindowHierarchyAttachRunListener.kt"})]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(t.p,{children:["Refer to the ",(0,o.jsx)(t.a,{href:"/docs/common/listeners",children:"Listeners wiki page"})," for details."]})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>s});var o=n(6540);const r={},i=o.createContext(r);function l(e){const t=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),o.createElement(i.Provider,{value:t},e.children)}}}]);